{"pageProps":{"post":{"title":"Como implementar modo dark em um projeto existente com nextjs e tailwindcss","date":"2021-09-08T14:44:07.322Z","slug":"como-hospedar-um-blog-nextjs-no-github-pages copy","author":{"name":"Lucas Almeida","picture":"/assets/blog/authors/lucas.png"},"content":"<h2>Introdução</h2>\n<p>No primeiro post mostrei como este blog foi implementado a partir de um exemplo oficial do nextjs e hospedado no github pages. Agora preciso implementar o modo dark nele para conseguirmos ler o conteúdo sem prejudicar nossa visão. hoje implementaremos um botão com ícones de sol/lua para alternar entre os modos dark e light.</p>\n<p>Usaremos o next-themes que já nos fornece o funcionamento dos modos dark/light e o react-icons apenas para inserir os ícones de sol e lua.</p>\n<pre><code>npm install next-themes react-icons\n</code></pre>\n<p>ou</p>\n<pre><code>yarn add next-themes react-icons\n</code></pre>\n<h2>instalando o ThemeProvider</h2>\n<p>No <code>pages/_app.tsx</code> deveremos importar o <code>ThemeProvider</code> e usa-lo para envolver o </p>\n<p>Para habilitar o modo dark como padrão insira o atributo <code>defaultTheme=\"dark\"</code> no <code>ThemeProvider</code></p>\n<p>O atributo <code>attribute=\"class\"</code> é obrigatório para fazer funcionar com as classes do tailwind</p>\n<pre><code>import { ThemeProvider } from \"next-themes\";\nimport { AppProps } from 'next/app'\nimport '../styles/index.css'\n\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    &#x3C;ThemeProvider defaultTheme=\"dark\" attribute=\"class\">\n      &#x3C;Component {...pageProps} />\n    &#x3C;/ThemeProvider>\n    );\n}\n\n</code></pre>\n<h2>Habilitando o modo dark</h2>\n<p>No arquivo <code>tailwind.config.js</code> insira a linha <code>darkMode: 'class',</code> para habilitar o modo dark</p>\n<pre><code>module.exports = {\n  content: ['./components/**/*.tsx', './pages/**/*.tsx'],\n  darkMode: 'class',\n</code></pre>\n<h2>Definindo as classes css de textos e background</h2>\n<p>Setaremos as cores do texto e backgrounds em cada modo.\nNo arquivo <code>styles/index.css</code> acrescente o seguinte código</p>\n<pre><code>@layer base {\n    body {\n        @apply bg-gray-50\n        dark:bg-gray-900\n        text-gray-900\n        dark:text-gray-50\n        transition-colors;\n    }\n}\n</code></pre>\n<h2>Componente para alternar modos.</h2>\n<p>Crie um componente chamado <code>components/themeToggle</code> com o seguinte conteúdo:</p>\n<pre><code>import { useEffect, useState } from \"react\";\nimport { useTheme } from \"next-themes\";\n\n// Aqui temos os ícones de Lua e Sol\nimport { BiMoon, BiSun } from \"react-icons/bi\";\n\nexport default function ThemeToggle() {\n    const [mounted, setMounted] = useState(false);\n    const { theme, setTheme } = useTheme();\n\n    useEffect(() => setMounted(true), []);\n    if (!mounted) return null;\n\n    function isDark() {\n        return theme === \"dark\";\n    }\n\n    return (\n        &#x3C;button\n            className=\"focus:outline-none\"\n            onClick={() => setTheme(isDark() ? \"light\" : \"dark\")}\n            aria-label=\"Theme toggle\"\n        >\n            {isDark() ? &#x3C;BiSun size={20} /> : &#x3C;BiMoon size={20} />}\n        &#x3C;/button>\n    );\n}\n</code></pre>\n<p>Agora é só importa-lo e usa-lo em qualquer lugar. aqui no blog coloquei no <code>components/layout.tsx</code> para ficar presente em todas as telas</p>\n<pre><code>&#x3C;div className=\"p-3 fixed right-0 top-0\">\n  &#x3C;ThemeToggle />\n&#x3C;/div>\n</code></pre>\n"}},"__N_SSG":true}